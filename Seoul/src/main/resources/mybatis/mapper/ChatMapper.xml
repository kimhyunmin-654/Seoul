<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.chat.mapper.ChatMapper">

<!-- Chat Room -->

<insert id="insertChatRoom" parameterType="com.sp.app.chat.model.ChatRoom" >
    INSERT INTO chat_room (
        room_id, product_id, buyer_id, seller_id, created_at
    ) VALUES (
        chatroom_seq.NEXTVAL, #{productId}, #{buyerId}, #{sellerId}, SYSDATE
    )
</insert>

<select id="findByRoomId" parameterType="long" resultType="com.sp.app.chat.model.ChatRoom">
    SELECT * FROM chat_room
    WHERE room_id = #{roomId}
</select>

<select id="findByProductAndBuyer" parameterType="com.sp.app.chat.model.ChatRoomQuery" resultType="com.sp.app.chat.model.ChatRoom">
    SELECT * FROM chat_room
    WHERE product_id = #{productId} AND buyer_id = #{user1Id}
</select>

<select id="listRoomsByMemberId" parameterType="long" resultType="com.sp.app.chat.model.ChatRoom">
    SELECT * FROM chat_room
    WHERE buyer_id = #{memberId} OR seller_id = #{memberId}
    ORDER BY created_at DESC
</select>


<!-- Chat Message -->

<insert id="insertChatMessage" parameterType="com.sp.app.chat.model.ChatMessage" >
    INSERT INTO product_chat (chat_id, product_id, sender_id, receiver_id, message, sent_time) 
    	VALUES (productchat_seq.NEXTVAL, #{productId}, #{senderId}, #{receiverId}, #{message}, SYSDATE)
</insert>

<select id="listMessagesByRoomId" parameterType="long" resultType="com.sp.app.chat.model.ChatMessage">
    SELECT * FROM product_chat
    WHERE product_id = (
        SELECT product_id FROM chat_room WHERE room_id = #{roomId}
    )
    AND (
        sender_id = (SELECT buyer_id FROM chat_room WHERE room_id = #{roomId})
        OR sender_id = (SELECT seller_id FROM chat_room WHERE room_id = #{roomId})
    )
    ORDER BY sent_time ASC
</select>

<select id="findLastMessage" parameterType="long" resultType="com.sp.app.chat.model.ChatMessage">
    SELECT * FROM product_chat
    WHERE product_id = (
        SELECT product_id FROM chat_room WHERE room_id = #{roomId}
    )
    AND (
        sender_id = (SELECT buyer_id FROM chat_room WHERE room_id = #{roomId})
        OR sender_id = (SELECT seller_id FROM chat_room WHERE room_id = #{roomId})
    )
    ORDER BY sent_time DESC
    FETCH FIRST 1 ROWS ONLY
</select>

<!-- Chat Notification -->
<insert id="insertNotification" parameterType="com.sp.app.chat.model.ChatNotification" >
    INSERT INTO chat_notification (noti_id, chat_id, member_id, is_read, created_at) 
    	VALUES (chatnotification_seq.NEXTVAL, #{chatId}, #{memberId}, 0, SYSDATE)
</insert>

<update id="markAsRead">
    UPDATE chat_notification
    SET is_read = 1
    WHERE chat_id = #{chatId} AND member_id = #{memberId}
</update>

<select id="countUnreadByMemberId" parameterType="long" resultType="int">
    SELECT COUNT(*) FROM chat_notification
    WHERE member_id = #{memberId} AND is_read = 0
</select>

<select id="listUnreadByMemberId" parameterType="long" resultType="com.sp.app.chat.model.ChatNotification">
    SELECT * FROM chat_notification
    WHERE member_id = #{memberId} AND is_read = 0
</select>

<!--  Transaction Review -->

<insert id="insertReview" parameterType="com.sp.app.chat.model.TransactionReview" >
    INSERT INTO transaction_review (review_id, chat_id, product_id, rating, content, created_at) 
    	VALUES (transactionreview_seq.NEXTVAL, #{chatId}, #{productId}, #{rating}, #{content}, SYSDATE)
</insert>

<select id="findReviewByChatId" parameterType="long" resultType="com.sp.app.chat.model.TransactionReview">
    SELECT * FROM transaction_review
    WHERE chat_id = #{chatId}
</select>

<select id="existsReviewByChatId" parameterType="long" resultType="boolean">
    SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
    FROM transaction_review
    WHERE chat_id = #{chatId}
</select>

<select id="listReviewByProductId" parameterType="long" resultType="com.sp.app.chat.model.TransactionReview">
    SELECT * FROM transaction_review
    WHERE product_id = #{productId}
    ORDER BY created_at DESC
</select>


</mapper>

