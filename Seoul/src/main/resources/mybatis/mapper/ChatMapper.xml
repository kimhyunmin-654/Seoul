<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.chat.mapper.ChatMapper">

<!-- Chat Room -->

<insert id="insertChatRoom" parameterType="com.sp.app.chat.model.ChatRoom" >
    INSERT INTO chat_room (
        room_id, product_id, buyer_id, seller_id, created_at
    ) VALUES (
        chatroom_seq.NEXTVAL, #{product_id}, #{buyer_id}, #{seller_id}, SYSDATE
    )
</insert>

<select id="findByRoomId" parameterType="long" resultType="com.sp.app.chat.model.ChatRoom">
    SELECT room_id, product_id, buyer_id, seller_id, created_at 
    FROM chat_room
    WHERE room_id = #{room_id}
</select>

<select id="findByProductAndBuyer" parameterType="map" resultType="com.sp.app.chat.model.ChatRoom">
    SELECT * FROM chat_room
    WHERE product_id = #{product_id} AND buyer_id = #{user1Id}
</select>

<select id="listRoomsByMemberId" parameterType="long" resultType="com.sp.app.chat.model.ChatRoom">
    SELECT cr.room_id, cr.product_id, cr.buyer_id, cr.seller_id, cr.created_at, p.product_name
    FROM chat_room cr
    LEFT JOIN product p ON p.product_id = cr.product_id
    WHERE cr.buyer_id = #{member_id} OR cr.seller_id = #{member_id}
    ORDER BY created_at DESC
</select>

<delete id="deleteChatRoom">
	DELETE FROM chat_room
	WHERE room_id = #{room_id}
</delete>

<!-- Chat Message -->

<insert id="insertChatMessage" parameterType="com.sp.app.chat.model.ChatMessage">
  <selectKey resultType="long" keyProperty="chat_id" order="BEFORE">
    SELECT productchat_seq.NEXTVAL FROM dual
  </selectKey>
  INSERT INTO product_chat (
    chat_id, room_id, product_id, sender_id, receiver_id, message, sent_time
  ) VALUES (
    #{chat_id}, #{room_id}, #{product_id}, #{sender_id}, #{receiver_id}, #{message}, SYSDATE
  )
</insert>

<select id="listMessagesByRoomId" parameterType="long" resultType="com.sp.app.chat.model.ChatMessage">
  SELECT pc.chat_id , pc.room_id , pc.product_id , pc.sender_id , m.nickname AS nickname, m.profile_photo AS profile_photo, pc.receiver_id, pc.message, pc.sent_time
  FROM product_chat pc
  LEFT JOIN member m ON m.member_id = pc.sender_id
  WHERE pc.room_id = #{room_id}
  ORDER BY pc.sent_time ASC
</select>

<select id="findLastMessage" parameterType="long" resultType="com.sp.app.chat.model.ChatMessage">
    SELECT chat_id, product_id, sender_id, receiver_id, message, sent_time AS sent_time, room_id
    FROM product_chat
    WHERE room_id = #{room_id}
    ORDER BY sent_time DESC
    FETCH FIRST 1 ROWS ONLY
</select>

<select id="findNicknameById" parameterType="long" resultType="String">
    SELECT nickname 
    FROM member 
    WHERE member_id = #{memberId}
</select>

<!-- Chat Notification -->
<insert id="insertNotification" parameterType="com.sp.app.chat.model.ChatNotification" >
    INSERT INTO chat_notification (noti_id, chat_id, member_id, is_read, created_at) 
    	VALUES (chatnotification_seq.NEXTVAL, #{chat_id}, #{member_id}, 0, SYSDATE)
</insert>

<update id="markAsRead" parameterType="map">
    UPDATE chat_notification
    SET is_read = 1
    WHERE chat_id = #{chat_id} AND member_id = #{member_id}
</update>

<select id="countUnreadByMemberId" parameterType="long" resultType="int">
    SELECT COUNT(*) FROM chat_notification
    WHERE member_id = #{member_id} AND is_read = 0
</select>

<select id="listUnreadByMemberId" parameterType="long" resultType="com.sp.app.chat.model.ChatNotification">
    SELECT * FROM chat_notification
    WHERE member_id = #{member_id} AND is_read = 0
</select>

<update id="markAllAsRead" parameterType="long">
    UPDATE chat_notification
    SET is_read = 1
    WHERE member_id = #{member_id} AND is_read = 0
</update>

<select id="findById" parameterType="long" resultType="com.sp.app.model.Member">
  SELECT member_id, nickname, profile_photo
  FROM member
  WHERE member_id = #{memberId}
</select>

</mapper>

