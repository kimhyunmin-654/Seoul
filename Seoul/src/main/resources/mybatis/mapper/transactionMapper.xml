<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.TransactionMapper">

<!-- 판매자가 올린 상품 목록 -->
<select id="listProductBySeller" parameterType="map" resultType="com.sp.app.model.Product">
  SELECT product_id, member_id, product_name, thumbnail, status,
         TO_CHAR(reg_date, 'YYYY-MM-DD HH24:MI') AS reg_date
  FROM product
  WHERE member_id = #{member_id}
  ORDER BY reg_date DESC
  OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
</select>

<!-- 판매자가 올린 총 개수 -->
<select id="dataCount" parameterType="map" resultType="Integer">
	SELECT NVL(COUNT(*),0)
	FROM product
	WHERE member_id = #{member_id}
</select>

<!-- 상품 상태 업데이트 (판매중/예약중/판매완료) -->
<update id="updateProductStatus" parameterType="map">
	  UPDATE product
	  SET status = #{status}
	  WHERE product_id = #{product_id}
	    AND member_id = #{member_id}
</update>

<!-- 구매자 후보: 이 상품으로 이 판매자와 채팅한 사용자 -->
<select id="listBuyersForProduct" parameterType="map" resultType="com.sp.app.model.BuyerCandidate">
	SELECT DISTINCT cr.room_id, cr.buyer_id, m.nickname, cr.created_at
	FROM chat_room cr
	JOIN member m ON m.member_id = cr.buyer_id
	WHERE cr.product_id = #{product_id}
		AND cr.seller_id = #{seller_id}
	ORDER BY cr.created_at DESC
</select>

<!-- 거래 내역 -->
<insert id="insertTransaction" parameterType="com.sp.app.model.ProductTransaction">
	INSERT INTO product_transaction (transaction_id, product_id, seller_id, buyer_id, room_id, status, created_at)
		VALUES (product_transaction_seq.NEXTVAL, #{product_id}, #{seller_id}, #{buyer_id}, #{room_id}, #{status}, SYSDATE)
</insert>

<!-- 상품 단건 -->
<select id="findProductById" parameterType="long" resultType="com.sp.app.model.Product">
	SELECT product_id, member_id, status
	FROM product
	WHERE product_id = #{product_id}
</select>

<!-- 구매자 구매 목록 -->
<select id="listPurchasesByBuyer" parameterType="map" resultType="com.sp.app.model.PurchaseItem">
	SELECT t.transaction_id, t.product_id, p.product_name, p.thumbnail, t.room_id,
		seller.nickname AS seller_nickname, buyer.nickname AS buyer_nickname, TO_CHAR(t.created_at, 'YYYY-MM-DD HH24:MI') AS created_at
	FROM product_transaction t
	JOIN product p ON p.product_id = t.product_id
	LEFT JOIN member seller ON seller.member_id = p.member_id
	LEFT JOIN member buyer ON buyer.member_id = t.buyer_id
	WHERE t.buyer_id = #{buyer_id}
	ORDER BY t.created_at DESC
	OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
</select>

<select id="dataCount2" parameterType="map" resultType="Integer">
	SELECT NVL(COUNT(*),0)
	FROM product_transaction
	WHERE buyer_id = #{buyer_id}
</select>


<!--  Transaction Review -->

<insert id="insertReview" parameterType="com.sp.app.model.TransactionReview" >
    INSERT INTO transaction_review (review_id, chat_id, product_id, rating, content, created_at, writer_id) 
    	VALUES (transactionreview_seq.NEXTVAL, #{chat_id}, #{product_id}, #{rating}, #{content}, SYSDATE, #{writer_id})
</insert>

<select id="findReviewByChatId" parameterType="long" resultType="com.sp.app.model.TransactionReview">
    SELECT * FROM transaction_review
    WHERE chat_id = #{chat_id}
</select>

<select id="existsReviewByChatId" parameterType="long" resultType="int">
    SELECT NVL(COUNT(*),0)
    FROM transaction_review
    WHERE chat_id = #{chat_id}
</select>

<select id="listReviewByProductId" parameterType="long" resultType="com.sp.app.model.TransactionReview">
    SELECT * FROM transaction_review
    WHERE product_id = #{product_id}
    ORDER BY created_at DESC
</select>

<select id="countReviewByWriter" parameterType="map" resultType="int">
	SELECT NVL(COUNT(*),0)
	FROM transaction_review
	WHERE writer_id = #{writer_id}
</select>

<select id="listReviewByWriter" parameterType="map" resultType="com.sp.app.model.ReviewView">
	SELECT tr.review_id, tr.chat_id, tr.product_id, tr.rating, tr.content, tr.created_at, m.member_id AS writer_id, m.nickname, m.profile_photo
	FROM transaction_review tr
	LEFT JOIN member m ON m.member_id = tr.writer_id
	WHERE tr.writer_id = #{writer_id}
	ORDER BY tr.created_at DESC
	OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
</select>

<select id="countReviewBySeller" parameterType="map" resultType="int">
	SELECT NVL(COUNT(*),0)
	FROM transaction_review tr
	JOIN product p ON p.product_id = tr.product_id
	WHERE p.member_id = #{seller_id}
</select>

<select id="listReviewBySeller" parameterType="map" resultType="com.sp.app.model.ReviewView">
	SELECT tr.review_id, tr.chat_id, tr.product_id, tr.rating, tr.content, tr.created_at, tr.writer_id, m.nickname, m.profile_photo
	FROM transaction_review tr
	JOIN product p ON p.product_id = tr.product_id
	LEFT JOIN member m ON m.member_id = tr.writer_id
	WHERE p.member_id = #{seller_id}
	ORDER BY tr.created_at DESC
	OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
</select>

<select id="listProductImages" parameterType="long" resultType="com.sp.app.model.ProductImage">
  SELECT image_id AS image_id, filename AS filename
  FROM product_image
  WHERE product_id = #{product_id}
</select>

<delete id="deleteProductImages" parameterType="long">
  DELETE FROM product_image
  WHERE product_id = #{product_id}
</delete>

<delete id="deleteProduct" parameterType="long">
  DELETE FROM product
  WHERE product_id = #{product_id}
</delete>
</mapper>